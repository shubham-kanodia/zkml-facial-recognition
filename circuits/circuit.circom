pragma circom 2.0.0;

include "../node_modules/circomlib/circuits/comparators.circom";
include "../node_modules/circomlib/circuits/switcher.circom";

template ArgMax (n) {
    signal input in[n];
    signal output out;
    component gts[n];
    component switchers[n+1];
    component aswitchers[n+1];

    signal maxs[n+1];
    signal amaxs[n+1];

    maxs[0] <== in[0];
    amaxs[0] <== 0;
    for(var i = 0; i < n; i++) {
        gts[i] = GreaterThan(30);
        switchers[i+1] = Switcher();
        aswitchers[i+1] = Switcher();

        gts[i].in[1] <== maxs[i];
        gts[i].in[0] <== in[i];

        switchers[i+1].sel <== gts[i].out;
        switchers[i+1].L <== maxs[i];
        switchers[i+1].R <== in[i];

        aswitchers[i+1].sel <== gts[i].out;
        aswitchers[i+1].L <== amaxs[i];
        aswitchers[i+1].R <== i;
        amaxs[i+1] <== aswitchers[i+1].outL;
        maxs[i+1] <== switchers[i+1].outL;
    }

    out <== amaxs[n];
}

template MatmulVec(m, n) {
    signal input A[m][n];
    signal input x[n];
    signal output out[m];
    
    signal s[m][n + 1];
    for (var i = 0; i < m; i++) {
        s[i][0] <== 0;
        for (var j = 1; j <= n; j++) {
            s[i][j] <== s[i][j-1] + A[i][j-1] * x[j-1];
        }
        out[i] <== s[i][n];
    }
}

template FaceClassifier (b, n) {
    signal input embedding[n];
    signal output digits[b];

    signal output out;

    var A[b][n] = [
[-211,17,95,37,-77,-82,17,-231,-192,14,-219,17,-150,63,-38,77,-160,105,-76,-187,-179,101,-31,-157,83,48,82,-58,-124,110,78,92,-85,70,169,42,-156,-166,-158,-88,16,-197,-146,124,123,159,-10,-192,-126,-127,-110,-81,106,-40,-219,-131,-173,-220,112,-7,-18,101,-45,-190,68,124,40,-15,-216,-98,-24,170,-161,-181,7,-20,-228,93,12,-206,101,-176,91,142],
[101,59,-103,-186,33,-11,-231,-103,84,-38,113,69,54,-135,-2,-207,-204,-64,-36,128,-54,-223,71,-143,-258,-34,84,-127,38,-44,-205,-176,95,69,-240,-2,-119,32,88,138,-209,100,-179,-119,-143,55,-80,-164,-38,-196,53,-15,52,80,127,-180,-166,27,42,79,121,123,-191,44,76,82,64,-119,49,117,33,-217,126,41,-217,53,-184,-36,-190,67,10,-48,87,-195],
[111,-167,-28,49,105,88,110,-40,64,-136,113,-208,-50,15,-132,-20,-192,46,-78,15,-96,35,-194,47,90,-220,-151,-30,11,20,68,42,84,89,-239,-143,-206,-92,101,-6,124,-140,61,-91,30,-36,47,-8,-13,-77,71,-47,105,63,23,-83,-19,-161,-186,140,67,-65,-83,114,-83,-121,88,-68,88,-167,82,-31,-223,88,82,-1,86,-244,1,-184,-233,65,-207,-29],
[-164,-29,-73,24,61,60,91,-171,-106,33,-147,-221,-181,-31,99,132,13,-147,-108,6,-162,28,40,133,69,-118,-65,115,6,-211,-36,112,-105,94,-82,104,84,20,-194,-40,-206,-205,65,-219,-38,-124,34,35,117,22,1,57,55,91,55,116,47,35,-65,-126,-155,-139,87,46,51,-36,57,38,-86,-106,-39,141,103,-198,20,-50,4,117,-121,-36,84,-206,-118,-95],
[47,-79,56,-225,63,-35,-93,-221,-164,-149,64,-51,42,-229,-156,-154,-146,119,105,132,-113,-189,140,-192,-138,-199,-48,-65,-190,31,37,70,-6,-6,-136,-41,-214,117,-195,-15,-84,154,-114,128,-192,82,-59,-86,-48,-161,-186,-65,77,-223,-227,-9,77,33,6,63,128,-3,124,-41,97,8,-21,138,82,34,68,117,-71,-9,111,2,-244,40,54,-30,-171,120,97,-3],
[-213,12,41,35,72,46,121,-88,-201,-19,37,-136,48,-136,-120,84,-52,-138,59,67,-212,-164,118,-229,50,15,127,56,91,34,36,-241,-16,-52,-179,71,-14,-169,-19,104,-188,153,49,119,77,-195,91,73,63,32,88,-20,-210,11,-191,103,-186,111,-191,-58,-169,99,124,-48,101,49,-32,-111,-147,-206,-72,-194,109,56,-16,-94,36,-54,-130,41,85,-217,0,-207],
[84,-86,-83,32,-190,-6,26,110,24,-125,-109,133,-122,-166,-126,-42,18,-222,-65,-221,30,94,50,85,-226,84,-82,17,44,105,-151,61,79,16,36,-242,71,-61,86,134,20,14,83,86,12,-127,65,28,-70,-161,-216,-73,-134,-163,-105,67,26,13,-150,-222,-172,-143,95,-215,17,106,-28,-27,8,42,-20,-173,-71,124,-216,38,94,-141,-163,131,87,78,131,-139],
[74,143,-106,70,-96,-38,105,-29,54,25,-126,-12,23,36,92,138,45,-172,-32,-206,-225,-224,-226,131,-22,-187,156,-106,-138,-133,-198,75,-19,-55,144,-188,35,34,-130,-180,118,-109,-11,-197,21,69,-53,-24,-141,52,-47,96,-29,-105,150,-199,115,15,-166,134,-168,-234,-220,-3,-229,-152,-104,115,-182,140,34,-163,10,-69,48,85,125,34,111,-160,69,83,-175,-172],
[-61,128,-63,-167,-188,59,-200,113,-5,53,100,-23,-59,132,-122,-68,-120,76,-103,68,46,125,-110,99,69,-242,12,48,-43,-166,-107,-85,-71,37,-135,71,70,68,126,-11,-163,-222,-224,-189,-158,-64,18,-179,19,-215,58,11,-129,92,-56,-106,94,-192,111,-1,-5,-78,-186,58,-132,-178,-35,71,-86,-146,79,105,-117,30,87,26,19,-173,118,-225,-152,114,-54,-3],
[80,-132,82,-38,-187,56,-120,-31,52,-100,-195,142,-94,-204,26,129,111,21,72,-115,-221,-199,24,28,-27,93,-143,-83,-130,132,162,-20,67,63,-91,-40,-85,113,-223,-185,61,-150,73,-54,49,-151,-45,-1,37,51,32,-1,-241,-181,120,-76,-206,56,-109,-181,-238,97,145,-231,33,142,-11,115,136,-17,-31,48,-209,-149,-95,52,114,-9,-129,91,-201,-241,-69,-102],
[47,127,97,-173,-49,-25,-212,37,108,17,-25,-72,67,-1,-219,-184,-46,-221,36,-125,-8,133,49,-241,33,91,-226,65,126,-8,-195,-129,-30,-13,-15,-230,-63,-183,124,82,-41,-165,-155,-75,-125,-7,63,-108,-103,8,37,53,152,137,73,0,120,100,83,-1,-172,29,-226,34,-229,108,7,37,-17,-168,-8,-108,-198,72,-54,-15,11,11,-127,-194,-189,129,162,-69],
[-233,-202,24,-148,-127,-59,-220,-159,-17,-109,96,-219,-167,-142,-224,-100,-200,67,-50,38,6,-83,122,123,-124,-231,29,-170,80,-245,66,52,-40,-27,25,118,147,115,36,-59,-158,-44,70,-195,-138,112,-31,-208,154,-127,113,-98,-186,105,112,-123,-160,-211,136,-193,-73,122,136,-161,110,116,21,-198,-151,-10,30,-168,68,-126,123,52,-157,58,130,35,44,-197,-174,-194],
[43,-187,-90,22,-37,-8,-25,98,50,-133,-268,5,-193,46,90,34,127,-160,89,-99,-173,6,-202,91,23,-83,-175,-141,37,0,-7,36,31,82,-53,-245,-16,-25,73,-221,40,16,-73,50,58,-173,-65,101,-217,101,-174,-61,-7,-140,-32,113,-131,98,73,10,16,-204,-70,25,-147,66,-106,131,65,87,76,-79,-214,23,89,0,102,46,-38,51,-202,-63,129,81],
[-110,2,-106,49,31,98,-81,58,-123,-79,23,-33,104,121,21,69,48,-185,-34,-164,89,104,-102,-147,29,-136,-19,77,67,-73,-6,-80,32,-39,134,11,-68,-198,22,-83,-183,-48,82,-71,-126,-221,85,86,-212,-3,106,-52,74,-15,28,-73,121,56,-135,83,-178,42,-88,98,-75,-169,33,98,-215,-201,45,55,122,20,-210,-38,28,63,-44,-95,90,2,85,-4],
[-8,-5,17,-125,-170,97,-1,27,61,-140,119,54,-21,-219,-155,-214,36,-199,-16,-77,85,-28,25,-179,-73,-27,-151,142,45,146,-71,127,-27,12,142,-23,26,-194,47,130,18,81,-192,110,-211,-199,-35,136,-65,-72,101,55,-145,-109,-127,-221,119,15,-168,52,68,5,-9,-165,69,-231,38,45,-82,-32,-51,107,137,8,91,62,-7,-247,150,-199,-136,103,-189,-28]];
    
    var B[b] = [
        101733,
        91947,
        -37567,
        -38786,
        -15512,
        -33533,
        -44482,
        -43766,
        -53429,
        -17389,
        62331,
        51260,
        -104966,
        -37017,
        1088
    ];

    component matmul = MatmulVec(b, n);
    matmul.A <== A;
    matmul.x <== embedding;

    signal inter[b] <== matmul.out;
    component amax = ArgMax(b);
    
    for(var i=0; i<b; i++) {
        amax.in[i] <== inter[i] + 1000000000;
    }

    out <== amax.out;
}

component main = FaceClassifier(15, 84);
